package org.wakeup.rest;

import java.net.URI;
import java.util.List;
import org.slf4j.Logger;
import org.wakeup.domain.Hello;
import org.slf4j.LoggerFactory;
import java.net.URISyntaxException;
import org.springframework.http.MediaType;
import org.wakeup.repository.HelloRepository;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.beans.factory.annotation.Autowired;

/**
 * Generated by wakeup generator 'http://wakeup.org.in'
 * REST controller for managing Hello.
 */
@RestController
@RequestMapping(value = "/api/hello")
public class HelloRest {

    private final Logger log = LoggerFactory.getLogger(HelloRest.class);

    @Autowired
    private HelloRepository helloRepository;

    /**
     * POST  /hello -> Create a new hello.
     */
    @RequestMapping(method = RequestMethod.POST, produces = MediaType.APPLICATION_JSON_VALUE,
                    consumes = MediaType.APPLICATION_JSON_VALUE)
    public ResponseEntity<Hello> createHello(@RequestBody final Hello hello) throws URISyntaxException {
        log.debug("REST request to save Hello : {}", hello);
        if (hello.getId() != null) return ResponseEntity.badRequest().header("Failure", "A new hello cannot already have an ID").body(null);
        Hello result = helloRepository.save(hello);
        return ResponseEntity.created(new URI("/api/hello/" + result.getId())).body(result);
    }

    /**
     * PUT  /hello -> Updates an existing hello.
     */
    @RequestMapping(method = RequestMethod.PUT, produces = MediaType.APPLICATION_JSON_VALUE,
                    consumes = MediaType.APPLICATION_JSON_VALUE)
    public ResponseEntity<Hello> updateHello(@RequestBody final Hello hello) throws URISyntaxException {
        log.debug("REST request to update Hello : {}", hello);
        if (hello.getId() == null) return ResponseEntity.badRequest().header("Failure", "An update entity must have an ID").body(null);
        Hello result = helloRepository.save(hello);
        return ResponseEntity.ok().body(result);
    }

    /**
     * GET  /hello -> get all the hello.
     */
    @RequestMapping(method = RequestMethod.GET)
    public ResponseEntity<List<Hello>> getAllHellos() throws URISyntaxException {
        log.debug("REST request to get all Hellos : {}");
        final List<Hello> hellos = helloRepository.findAll();
        return ResponseEntity.ok().body(hellos);
    }

    /**
     * GET  /hello/:id -> get the "id" hello.
     */
    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    public ResponseEntity<Hello> getHello(@PathVariable final Long id) {
        log.debug("REST request to get Hello : {}", id);
        return ResponseEntity.ok().body(helloRepository.findOne(id));
    }

    /**
     * DELETE  /hello/:id -> delete the "id" hello.
     */
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    public ResponseEntity<Void> deleteHello(@PathVariable final Long id) {
        log.debug("REST request to delete Hello : {}", id);
        if (id == null) return ResponseEntity.badRequest().header("Failure", "Must have an ID").body(null);
        if(helloRepository.exists(id)) helloRepository.delete(id);
        return ResponseEntity.ok().build();
    }
}
